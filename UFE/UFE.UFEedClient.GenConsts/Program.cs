using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using CommandLine;

namespace UFE.UFEedClient.GetConsts
{
	static class Consts
	{
		public const int Xxl = 0;
		public const string Xxx = "aaa";
	}

	class Program
	{
		private class Options
		{
			[Option('f', "fix", Required = false, Default = "field.hpp", HelpText = "Set FIX fields path to field.hpp, defaults to field.hpp")]
			public string FIXPath { get; set; }
			[Option('u', "ufe", Required = false, Default = "ufeconsts.hpp", HelpText = "Set UFE fields path to ufeconsts.hpp, defaults to ufeconsts.hpp")]
			public string UFEPath { get; set; }
			[Option('o', "out", Required = false, Default = "UFEConsts.cs", HelpText = "Set C# output path to Consts.cs, defaults to UFEConsts.cs")]
			public string OutputPath { get; set; }
		}

		public static void Main(string[] args)
		{
			Parser.Default.ParseArguments<Options>(args)
			.WithParsed(o =>
			{
				Console.WriteLine($"Using FIX path={o.FIXPath}, UFE path={o.UFEPath}, output path={o.OutputPath}");
				GenerateConsts(o.FIXPath, o.UFEPath, o.OutputPath);
			});        
		}

		private static void GenerateConsts(string fixPath, string ufePath, string outputPath)
		{
			using (var of = new StreamWriter(Path.Combine(outputPath)))
			{
				of.WriteLine($@"
// THIS FILE HAS BEEN AUTOGENERATED ON {DateTime.Now} BY UFE.UFEedClient.GetConsts
// ReSharper disable InconsistentNaming
namespace UFE.UFEedClient 
{{
	public static class Consts
	{{
		// UFE CONSTS");

				var ufeLines = File.ReadLines(ufePath);
				var ufeOffsets = new Dictionary<string, int>();
				foreach(var line in ufeLines)
				{
					//eg. constexpr int64_t fix8_status(int64_t src) { return src + 70000; }    
					var matches = Regex.Match(line, @"constexpr\s*int64_t\s*(.*)\(.*([0-9]{5});.*");
					if (matches.Length != 0)
						ufeOffsets[matches.Groups[1].Value] = int.Parse(matches.Groups[2].Value); 

					//eg. const int64_t session_flag_report { 0 };
					var noOffsetsLineValue = Regex.Match(line, @"const int64_t (\S*)\s*{\s*(\d+)\s.*");
					if (noOffsetsLineValue.Length != 0)
						of.WriteLine($"\t\tpublic const int {noOffsetsLineValue.Groups[1].Value.ToUpper()} = {noOffsetsLineValue.Groups[2].Value};");

					//eg. const int64_t ufe_all_services { 0x1ffff }; 
					var noOffsetsLineValueHex = Regex.Match(line, @"const int64_t (\S*)\s*{\s*(0[xX][0-9a-fA-F]+)\s.*");
					if (noOffsetsLineValueHex.Length != 0)
						of.WriteLine($"\t\tpublic const int {noOffsetsLineValueHex.Groups[1].Value.ToUpper()} = {noOffsetsLineValueHex.Groups[2].Value};");

					//eg. const int64_t fix8_ok { fix8_status(0) };
					var addOffsetLineValue = Regex.Match(line, @"const int64_t (\S*)\s*{\s*(.*)\(([0-9]*)\)");
					if (addOffsetLineValue.Length != 0)
					{
						var offset = ufeOffsets[addOffsetLineValue.Groups[2].Value];
						of.WriteLine($"\t\tpublic const int {addOffsetLineValue.Groups[1].Value.ToUpper()}  = {offset + int.Parse(addOffsetLineValue.Groups[3].Value)};");
					}
				}
				var offset1 = ufeOffsets["ufe_common_fix"];
				of.WriteLine($"\t\tpublic const int UFE_COMMON_FIX = {offset1};");
				
				//Write UFEGW connection defaults
				of.WriteLine(@"
		public const int UFE_FLOAT_PRECISION = 2;

		// UFEGW CONSTS
		public const string SUBSCRIBER = ""subscriber"";
		public const string SUBSCRIBER_DEFAULT = ""tcp://127.0.0.1:55745"";
		public const string REQUESTER = ""requester"";
		public const string REQUESTER_DEFAULT = ""tcp://127.0.0.1:55746"";
		public const string PUBLISHER = ""publisher"";
		public const string PUBLISHER_DEFAULT = ""tcp://*:55747"";
		public const string RESPONDER = ""responder"";
		public const string RESPONDER_DEFAULT = ""tcp://*:55748"";
		public const string SUBSCRIBER_TOPIC = ""subscribertopic"";
		public const string SUBSCRIBER_TOPIC_DEFAULT = ""ufegw-publisher"";
		public const string REQUESTER_TOPIC = ""requestertopic"";
		public const string REQUESTER_TOPIC_DEFAULT = ""ufegw-responder"";
		public const string PUBLISHER_TOPIC = ""publishertopic"";
		public const string PUBLISHER_TOPIC_DEFAULT = ""ufeedclient-publisher"";
		public const string RESPONDER_TOPIC = ""respondertopic"";
		public const string RESPONDER_TOPIC_DEFAULT = ""ufeedclient-responder"";            

		// FIX CONSTS");

				var fixLines = File.ReadLines(fixPath);
				foreach (var line in fixLines)
				{
					//eg. const f8String Common_MsgType_HEARTBEAT("0");
					var commonLine = Regex.Match(line, @"const .* (Common.*)\((\S*)\).*");
					if (commonLine.Length != 0)
					{
						var name = commonLine.Groups[1].Value.ToUpper();
						var nameType = name.Contains("MSGTYPE_") ? "string" : name.Contains("MSGBYTE_") ? "char" : "int";
						of.WriteLine($"\t\tpublic const {nameType} {name} = {commonLine.Groups[2].Value};");
					}
				}
				of.WriteLine(@"
	}
}
");
			}
		}
	}
}